{"version":3,"file":"static/js/680.cf53eb53.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/ContactsBox.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\nimport { Field as FormikField } from 'formik';\nimport { ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 70%;\n  padding: 8px;\n  border: 1px solid #1976d2;\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-family: inherit;\n  font-size: 1em;\n`;\n\nexport const Field = styled(FormikField)`\n  display: block;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-family: inherit;\n  font-size: 1.4rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n\n  &:focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 1.2rem;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  font: inherit;\n  cursor: pointer;\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin: 2px auto;\n  border: solid 1px transparent;\n  border-radius: 4px;\n  padding: 0.5em 1em;\n  color: #ffffff;\n  background-color: #1976d2;\n  width: 50%;\n\n  &:active {\n    transform: translateY(1px);\n    filter: saturate(150%);\n  }\n\n  &:hover,\n  &:focus {\n    color: #1976d2;\n    border-color: currentColor;\n    background-color: white;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.listContacts;\nexport const selectFilter = state => state.filter;\n\n// Составной селектор\n// export const selectSearchContacts = state => {\n//   console.log('Calculating task count');\n//   const contacts = selectContacts(state);\n//   const normalizeFilter = selectFilter(state).toLowerCase();\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizeFilter)\n//   );\n// };\n\n// Мемоизация: в данном задании особой разницы не заметила\nexport const selectSearchContacts = createSelector(\n  // Массив входных селекторов\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { Form, Label, Field, ErrorMessage, Button } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Typography } from '@mui/material';\n\nconst checkContact = (contacts, name) => {\n  if (contacts.find(contact => name === contact.name)) {\n    alert(`${name} is already is contact`);\n    return 1;\n  } else return null;\n};\n\nconst ContactFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Incorrect format. Enter in format XXX-XXX-XXXX'\n    )\n    .required('Required'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  let hasContact = true;\n  return (\n    <>\n      <Typography\n        sx={{\n          margin: '10px 100px',\n          textAlign: 'center',\n          fontWeight: '700',\n          fontSize: '1.5rem',\n          color: 'rgb(106, 102, 107)',\n        }}\n      >\n        Add new contact:\n      </Typography>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={ContactFormSchema}\n        onSubmit={(values, actions) => {\n          hasContact = checkContact(contacts, values.name);\n          if (!hasContact) dispatch(addContact(values));\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <Label>\n            Name\n            <Field\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Label>\n          <Label>\n            Phone\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </Label>\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  /* display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 7px; */\n`;\n\nexport const Button = styled.button`\n  font: inherit;\n  cursor: pointer;\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin: 2px 10px;\n  border: solid 1px transparent;\n  border-radius: 4px;\n  font-size: 16px;\n  padding: 0.1em 0.2em;\n  color: #ffffff;\n  background-color: #6a666b;\n  width: 10%;\n\n  &:hover,\n  &:focus {\n    color: #6a666b;\n    border-color: currentColor;\n    background-color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Typography, IconButton, Divider, Grid } from '@mui/material';\nimport { DeleteForever } from '@mui/icons-material';\n\nexport default function Contact({ contact }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  return (\n    <>\n      <ContactItem>\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          spacing={8}\n          // sx={{\n          //   marginTop: '20px',\n          // }}\n        >\n          <Grid item xs={5}>\n            <Typography sx={{ fontSize: '1em', textAlign: 'left' }}>\n              {contact.name + ': '}\n            </Typography>\n          </Grid>\n          <Grid item xs={5}>\n            <Typography sx={{ fontSize: '1em', textAlign: 'left' }}>\n              {contact.number}\n            </Typography>\n          </Grid>\n          <Grid item xs={2}>\n            <IconButton aria-label=\"delete\" size=\"large\" onClick={handleDelete}>\n              <DeleteForever fontSize=\"inherit\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </ContactItem>\n\n      <Divider />\n    </>\n  );\n}\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import Contact from 'components/Contact/Contact';\nimport { selectSearchContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { List, Typography } from '@mui/material';\n\nexport default function ContactList() {\n  const list = useSelector(selectSearchContacts);\n\n  return (\n    <>\n      {list.length === 0 ? (\n        <Typography>You don't have contacts in your phonebook</Typography>\n      ) : (\n        <List>\n          {list.map(contact => (\n            <Contact key={contact.id} contact={contact}></Contact>\n          ))}\n        </List>\n      )}\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Header = styled.h1`\n  margin-left: 20px;\n  color: #1e0827;\n`;\n\nexport const HeaderContacts = styled.h2`\n  margin-left: 20px;\n  font-weight: 700;\n  font-size: 1.8rem;\n  color: #1976d2;\n  text-align: center;\n`;\n","import styled from 'styled-components';\nimport { Field as FormikFild } from 'formik';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 30%;\n  padding: 8px;\n  border: 1px solid #2a2a2a;\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const Field = styled(FormikFild)`\n  display: block;\n  margin-top: 10px;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-family: inherit;\n  font-size: 1.4rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n\n  &:focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  font-weight: 700;\n  font-size: 1.2rem;\n  color: #6a666b;\n`;\n","import { Formik } from 'formik';\nimport { Label } from './Filter.styled';\nimport { Form, Field } from 'components/ContactForm/ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <Formik initialValues={{ name: '' }}>\n      <Form>\n        <Label>\n          Find contact by name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            value={value}\n            onChange={handleChange}\n          />\n        </Label>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport { HeaderContacts } from 'components/ContactsBox.styled';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { CirclesWithBar } from 'react-loader-spinner';\nimport { Box } from '@mui/material';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <HeaderContacts>Your contacts:</HeaderContacts>\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'start',\n          gap: '5px',\n        }}\n      >\n        <Box sx={{ width: '50%' }}>\n          <Filter />\n          <ContactForm />\n        </Box>\n        <Box\n          sx={{\n            width: '45%',\n            paddingRight: '30px',\n          }}\n        >\n          {isLoading && !error && (\n            <CirclesWithBar\n              height=\"100\"\n              width=\"100\"\n              color=\"#42a5f5\"\n              wrapperStyle={{}}\n              wrapperClass=\"\"\n              visible={true}\n              outerCircleColor=\"\"\n              innerCircleColor=\"\"\n              barColor=\"\"\n              ariaLabel=\"circles-with-bar-loading\"\n            />\n          )}\n          <ContactList />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","Label","Field","FormikField","ErrorMessage","FormikError","Button","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","listContacts","selectFilter","filter","selectSearchContacts","createSelector","contact","name","toLowerCase","includes","ContactFormSchema","Yup","shape","min","max","required","number","matches","dispatch","useDispatch","useSelector","hasContact","Typography","sx","margin","textAlign","fontWeight","fontSize","color","initialValues","validationSchema","onSubmit","values","actions","find","alert","checkContact","addContact","resetForm","type","title","component","ContactItem","Contact","Grid","container","direction","justifyContent","alignItems","spacing","item","xs","IconButton","size","onClick","deleteContact","id","DeleteForever","Divider","ContactList","list","length","List","map","HeaderContacts","FormikFild","value","onChange","evt","changeFilter","currentTarget","Contacts","useEffect","fetchContacts","Box","display","gap","width","paddingRight","height","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel"],"sourceRoot":""}