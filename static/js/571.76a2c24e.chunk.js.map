{"version":3,"file":"static/js/571.76a2c24e.chunk.js","mappings":"yTAKaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,kMAWJE,EAAQF,EAAAA,GAAAA,MAAH,qEAKLG,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,mkBAwBLK,GAAeL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,6DAKZO,EAASP,EAAAA,GAAAA,OAAH,of,wKChDNQ,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAAnB,EACvBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAEnBC,EAAiB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,YAAnB,EACtBC,EAAe,SAAAP,GAAK,OAAIA,EAAMQ,MAAV,EAapBC,GAAuBC,EAAAA,EAAAA,IAElC,CAACL,EAAgBE,IACjB,SAACN,EAAUO,GACT,OAAOP,EAASO,QAAO,SAAAG,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASN,EAAOK,cADf,GAG/B,I,mBCZGE,EAAoBC,EAAAA,KAAaC,MAAM,CAC3CL,KAAMI,EAAAA,KACHE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,OAAQL,EAAAA,KACLM,QACC,6EACA,kDAEDF,SAAS,cA8Cd,EA3CoB,WAClB,IAAMG,GAAWC,EAAAA,EAAAA,MACXvB,GAAWwB,EAAAA,EAAAA,IAAYpB,GAE7B,OACE,SAAC,KAAD,CACEqB,cAAe,CACbd,KAAM,GACNS,OAAQ,IAEVM,iBAAkBZ,EAClBa,SAAU,SAACC,EAAQC,GACjB,IAAMC,EAhCO,SAAC9B,EAAUW,GAC9B,OAAIX,EAAS+B,MAAK,SAAArB,GAAO,OAAIC,IAASD,EAAQC,IAArB,KACvBqB,MAAM,GAAD,OAAIrB,EAAJ,2BACE,GACK,IACf,CA2B0BsB,CAAajC,EAAU4B,EAAOjB,MAC5CmB,GAAYR,GAASY,EAAAA,EAAAA,IAAWN,IACrCC,EAAQM,WACT,EAVH,UAYE,UAAC,KAAD,YACE,UAAC,KAAD,mBAEE,SAAC,KAAD,CACEC,KAAK,OACLzB,KAAK,OACL0B,MAAM,4IAER,SAAC,KAAD,CAAc1B,KAAK,OAAO2B,UAAU,YAEtC,UAAC,KAAD,oBAEE,SAAC,KAAD,CACEF,KAAK,MACLzB,KAAK,SACL0B,MAAM,+FACNlB,UAAQ,KAEV,SAAC,KAAD,CAAcR,KAAK,SAAS2B,UAAU,YAExC,SAAC,KAAD,CAAQF,KAAK,SAAb,6BAIP,E,mBClEYG,EAAcjD,EAAAA,GAAAA,GAAH,kHAOXO,EAASP,EAAAA,GAAAA,OAAH,wbCJJ,SAASkD,EAAT,GAA+B,IAAZ9B,EAAW,EAAXA,QAC1BY,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACgB,EAAD,YACE,uBAAI7B,EAAQC,KAAO,QACnB,uBAAID,EAAQU,UACZ,SAACvB,EAAD,CAAQuC,KAAK,SAASK,QALL,kBAAMnB,GAASoB,EAAAA,EAAAA,IAAchC,EAAQiC,IAArC,EAKjB,sBAKL,CCfM,I,MAAMC,EAAOtD,EAAAA,GAAAA,GAAH,+DCGF,SAASuD,IACtB,IAAMC,GAAOtB,EAAAA,EAAAA,IAAYhB,GAEzB,OACE,SAACoC,EAAD,UACGE,EAAKC,KAAI,SAAArC,GAAO,OACf,SAAC8B,EAAD,CAA0B9B,QAASA,GAArBA,EAAQiC,GADP,KAKtB,CCbM,I,IAAMK,EAAM1D,EAAAA,GAAAA,IAAH,yLAUH2D,EAAS3D,EAAAA,GAAAA,GAAH,iEAKN4D,EAAiB5D,EAAAA,GAAAA,GAAH,iECddG,GAAQH,EAAAA,EAAAA,IAAO6D,EAAAA,GAAP7D,CAAH,wlBAyBLE,EAAQF,EAAAA,GAAAA,MAAH,wK,UCJlB,EAlBe,WACb,IAAM8D,GAAQ5B,EAAAA,EAAAA,IAAYlB,GACpBgB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CAAQE,cAAe,CAAEd,KAAM,IAA/B,UACE,UAACnB,EAAD,mCAEE,SAACC,EAAD,CAAO2C,KAAK,OAAOzB,KAAK,OAAOyC,MAAOA,EAAOC,SAR9B,SAAAC,GACnBhC,GAASiC,EAAAA,EAAAA,GAAaD,EAAIE,cAAcJ,OACzC,QAUF,E,UCZYK,EAAW,WACtB,IAAMnC,GAAWC,EAAAA,EAAAA,MACXtB,GAAYuB,EAAAA,EAAAA,IAAY1B,GACxBK,GAAQqB,EAAAA,EAAAA,IAAYtB,GAK1B,OAHAwD,EAAAA,EAAAA,YAAU,WACRpC,GAASqC,EAAAA,EAAAA,MACV,GAAE,CAACrC,KAEF,UAAC0B,EAAD,YACE,SAACC,EAAD,yBACA,SAAC,EAAD,KACA,SAACC,EAAD,wBACA,SAAC,EAAD,IACCjD,IAAcE,IACb,SAAC,KAAD,CACEyD,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,iBAAiB,GACjBC,iBAAiB,GACjBC,SAAS,GACTC,UAAU,8BAGd,SAACxB,EAAD,MAGL,EAED,G","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactsBox.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\nimport { Field as FormikField } from 'formik';\nimport { ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  margin-left: 20px;\n  width: 30%;\n  padding: 8px;\n  border: 1px solid #2a2a2a;\n  border-radius: 0.25rem;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Field = styled(FormikField)`\n  display: block;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-family: inherit;\n  font-size: 1.4rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n\n  &:focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 1.2rem;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  font: inherit;\n  cursor: pointer;\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin: 2px auto;\n  border: solid 1px transparent;\n  border-radius: 4px;\n  padding: 0.5em 1em;\n  color: #ffffff;\n  background-color: #9555af;\n  width: 50%;\n\n  &:active {\n    transform: translateY(1px);\n    filter: saturate(150%);\n  }\n\n  &:hover,\n  &:focus {\n    color: #9555af;\n    border-color: currentColor;\n    background-color: white;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.listContacts;\nexport const selectFilter = state => state.filter;\n\n// Составной селектор\n// export const selectSearchContacts = state => {\n//   console.log('Calculating task count');\n//   const contacts = selectContacts(state);\n//   const normalizeFilter = selectFilter(state).toLowerCase();\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizeFilter)\n//   );\n// };\n\n// Мемоизация: в данном задании особой разницы не заметила\nexport const selectSearchContacts = createSelector(\n  // Массив входных селекторов\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { Form, Label, Field, ErrorMessage, Button } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst checkContact = (contacts, name) => {\n  if (contacts.find(contact => name === contact.name)) {\n    alert(`${name} is already is contact`);\n    return 1;\n  } else return null;\n};\n\nconst ContactFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Incorrect format. Enter in format XXX-XXX-XXXX'\n    )\n    .required('Required'),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactFormSchema}\n      onSubmit={(values, actions) => {\n        const hasContact = checkContact(contacts, values.name);\n        if (!hasContact) dispatch(addContact(values));\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Phone\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 7px;\n`;\n\nexport const Button = styled.button`\n  font: inherit;\n  cursor: pointer;\n  display: inline-block;\n  text-align: center;\n  text-decoration: none;\n  margin: 2px 10px;\n  border: solid 1px transparent;\n  border-radius: 4px;\n  font-size: 16px;\n  padding: 0.1em 0.2em;\n  color: #ffffff;\n  background-color: #6a666b;\n  width: 10%;\n\n  &:hover,\n  &:focus {\n    color: #6a666b;\n    border-color: currentColor;\n    background-color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem, Button } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport default function Contact({ contact }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  return (\n    <ContactItem>\n      <p>{contact.name + ': '}</p>\n      <p>{contact.number}</p>\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </ContactItem>\n  );\n}\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 50%;\n  margin-bottom: 50px;\n`;\n","import Contact from 'components/Contact/Contact';\nimport { List } from './ContactList.styled';\nimport { selectSearchContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nexport default function ContactList() {\n  const list = useSelector(selectSearchContacts);\n\n  return (\n    <List>\n      {list.map(contact => (\n        <Contact key={contact.id} contact={contact}></Contact>\n      ))}\n    </List>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  height: 100vh;\n  font-size: 24px;\n  color: #010101;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Header = styled.h1`\n  margin-left: 20px;\n  color: #1e0827;\n`;\n\nexport const HeaderContacts = styled.h2`\n  margin-left: 20px;\n  color: #9555af;\n`;\n","import styled from 'styled-components';\nimport { Field as FormikFild } from 'formik';\n\nexport const Field = styled(FormikFild)`\n  display: block;\n  margin-top: 10px;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-family: inherit;\n  font-size: 1.4rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n\n  &:focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 30%;\n  margin-left: 25px;\n  font-weight: 700;\n  font-size: 1.6rem;\n  color: #6a666b;\n`;\n","import { Formik } from 'formik';\nimport { Field, Label } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <Formik initialValues={{ name: '' }}>\n      <Label>\n        Find contact by name\n        <Field type=\"text\" name=\"name\" value={value} onChange={handleChange} />\n      </Label>\n    </Formik>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Box, Header, HeaderContacts } from 'components/ContactsBox.styled';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { CirclesWithBar } from 'react-loader-spinner';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Box>\n      <Header>Phonebook</Header>\n      <ContactForm />\n      <HeaderContacts>Contacts</HeaderContacts>\n      <Filter />\n      {isLoading && !error && (\n        <CirclesWithBar\n          height=\"100\"\n          width=\"100\"\n          color=\"#9555af\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n          outerCircleColor=\"\"\n          innerCircleColor=\"\"\n          barColor=\"\"\n          ariaLabel=\"circles-with-bar-loading\"\n        />\n      )}\n      <ContactList />\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","Label","Field","FormikField","ErrorMessage","FormikError","Button","selectIsLoading","state","contacts","isLoading","selectError","error","selectContacts","listContacts","selectFilter","filter","selectSearchContacts","createSelector","contact","name","toLowerCase","includes","ContactFormSchema","Yup","shape","min","max","required","number","matches","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","actions","hasContact","find","alert","checkContact","addContact","resetForm","type","title","component","ContactItem","Contact","onClick","deleteContact","id","List","ContactList","list","map","Box","Header","HeaderContacts","FormikFild","value","onChange","evt","changeFilter","currentTarget","Contacts","useEffect","fetchContacts","height","width","color","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel"],"sourceRoot":""}